// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleForumApp.Persistence.EntityFrameworkCore.Context;

#nullable disable

namespace SimpleForumApp.Persistence.Migrations
{
    [DbContext(typeof(SimpleForumAppContext))]
    [Migration("20240703201137_mig_3")]
    partial class mig_3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Action", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Actions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Sevdi",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Sevmedi",
                            StatusId = 1L
                        });
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Author", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorTypeId");

                    b.HasIndex("GroupId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Authors", t =>
                        {
                            t.HasCheckConstraint("CK_Author_UserId_GroupId", "([UserId] IS NOT NULL AND [GroupId] IS NULL) OR ([UserId] IS NULL AND [GroupId] IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.AuthorType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("AuthorTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kullanıcı",
                            StatusId = 1L,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Grup",
                            StatusId = 1L,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Abhazya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Afganistan",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Almanya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Amerika Birleşik Devletleri",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Andorra",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Angola",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Antigua ve Barbuda",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Arjantin",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 9L,
                            Name = "Arnavutluk",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            Name = "Avusturalya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 11L,
                            Name = "Avusturya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 12L,
                            Name = "Azerbaycan",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 13L,
                            Name = "Bahamalar",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 14L,
                            Name = "Bahreyn",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 15L,
                            Name = "Bangladeş",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 16L,
                            Name = "Barbados",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 17L,
                            Name = "Belçika",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 18L,
                            Name = "Belize",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 19L,
                            Name = "Benin",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 20L,
                            Name = "Belarus",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 21L,
                            Name = "Bhutan",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 22L,
                            Name = "Birleşik Arap Emirlikleri",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 23L,
                            Name = "Birleşik Krallık",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 24L,
                            Name = "Bolivya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 25L,
                            Name = "Bosna-Hersek",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 26L,
                            Name = "Botsvana",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 27L,
                            Name = "Brezilya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 28L,
                            Name = "Brunei",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 29L,
                            Name = "Bulgaristan",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 30L,
                            Name = "Burkina Faso",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 31L,
                            Name = "Burundi",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 32L,
                            Name = "Cezayir",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 33L,
                            Name = "Cibuti",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 34L,
                            Name = "Çad",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 35L,
                            Name = "Çekya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 36L,
                            Name = "Çin",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 37L,
                            Name = "Danimarka",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 38L,
                            Name = "Doğu Timor",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 39L,
                            Name = "Dominik Cumhuriyeti",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 40L,
                            Name = "Dominika",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 41L,
                            Name = "Ekvador",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 42L,
                            Name = "Ekvator Ginesi",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 43L,
                            Name = "El Salvador",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 44L,
                            Name = "Endonezya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 45L,
                            Name = "Eritre",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 46L,
                            Name = "Ermenistan",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 47L,
                            Name = "Estonya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 48L,
                            Name = "Esvatini",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 49L,
                            Name = "Etiyopya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 50L,
                            Name = "Fas",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 51L,
                            Name = "Fiji",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 52L,
                            Name = "Fildişi Sahili",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 53L,
                            Name = "Filipinler",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 54L,
                            Name = "Filistin",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 55L,
                            Name = "Finlandiya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 56L,
                            Name = "Fransa",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 57L,
                            Name = "Gabon",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 58L,
                            Name = "Gambiya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 59L,
                            Name = "Gana",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 60L,
                            Name = "Gine",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 61L,
                            Name = "Gine-Bissau",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 62L,
                            Name = "Girenada",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 63L,
                            Name = "Guyana",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 64L,
                            Name = "Guatemala",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 65L,
                            Name = "Güney Afrika Cumhuriyeti",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 66L,
                            Name = "Güney Kıbrıs",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 67L,
                            Name = "Güney Kore",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 68L,
                            Name = "Güney Osetya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 69L,
                            Name = "Güney Sudan",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 70L,
                            Name = "Gürcistan",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 71L,
                            Name = "Haiti",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 72L,
                            Name = "Hırvatistan",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 73L,
                            Name = "Hindistan",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 74L,
                            Name = "Hollanda",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 75L,
                            Name = "Honduras",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 76L,
                            Name = "Irak",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 77L,
                            Name = "İran",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 78L,
                            Name = "İrlanda",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 79L,
                            Name = "İspanya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 80L,
                            Name = "İsrail",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 81L,
                            Name = "İsveç",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 82L,
                            Name = "İsviçre",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 83L,
                            Name = "İtalya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 84L,
                            Name = "İzlanda",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 85L,
                            Name = "Jamaika",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 86L,
                            Name = "Japonya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 87L,
                            Name = "Kamboçya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 88L,
                            Name = "Kamerun",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 89L,
                            Name = "Kanada",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 90L,
                            Name = "Karadağ",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 91L,
                            Name = "Katar",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 92L,
                            Name = "Kazakistan",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 93L,
                            Name = "Kenya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 94L,
                            Name = "Kırgızistan",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 95L,
                            Name = "Kiribati",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 96L,
                            Name = "Kolombiya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 97L,
                            Name = "Komorlar",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 98L,
                            Name = "Kongo Cumhuriyeti",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 99L,
                            Name = "Kongo DC",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 100L,
                            Name = "Kosova",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 101L,
                            Name = "Kosta Rika",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 102L,
                            Name = "Kuveyt",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 103L,
                            Name = "Kuzey Kıbrık Türk Cumhuriyeti",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 104L,
                            Name = "Kuzey Kore",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 105L,
                            Name = "Kuzey Makedonya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 106L,
                            Name = "Küba",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 107L,
                            Name = "Laos",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 108L,
                            Name = "Lesotho",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 109L,
                            Name = "Letonya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 110L,
                            Name = "Liberya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 111L,
                            Name = "Libya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 112L,
                            Name = "Lihtenştayn",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 113L,
                            Name = "Litvanya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 114L,
                            Name = "Lübnan",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 115L,
                            Name = "Lüksemburg",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 116L,
                            Name = "Maceristan",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 117L,
                            Name = "Madagaskar",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 118L,
                            Name = "Matavi",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 119L,
                            Name = "Maldivler",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 120L,
                            Name = "Malezya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 121L,
                            Name = "Mali",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 122L,
                            Name = "Malta",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 123L,
                            Name = "Marshall Adaları",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 124L,
                            Name = "Mauritius",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 125L,
                            Name = "Meksika",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 126L,
                            Name = "Mısır",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 127L,
                            Name = "Mikronezya Federal Devletleri",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 128L,
                            Name = "Moğolistan",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 129L,
                            Name = "Moldova",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 130L,
                            Name = "Monako",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 131L,
                            Name = "Moritanya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 132L,
                            Name = "Mozambik",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 133L,
                            Name = "Myanmar",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 134L,
                            Name = "Namibya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 135L,
                            Name = "Nauru",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 136L,
                            Name = "Nepal",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 137L,
                            Name = "Nikaragua",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 138L,
                            Name = "Nijer",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 139L,
                            Name = "Nijerya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 140L,
                            Name = "Norveç",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 141L,
                            Name = "Orta Afrika Cumhuriyeti",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 142L,
                            Name = "Özbekistan",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 143L,
                            Name = "Pakistan",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 144L,
                            Name = "Palau",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 145L,
                            Name = "Panama",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 146L,
                            Name = "Papua Yeni Gine",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 147L,
                            Name = "Paraguay",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 148L,
                            Name = "Peru",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 149L,
                            Name = "Polonya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 150L,
                            Name = "Portekiz",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 151L,
                            Name = "Romanya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 152L,
                            Name = "Ruanda",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 153L,
                            Name = "Rusya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 154L,
                            Name = "Sahra Demokratik Arap Cumhuriyeti",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 155L,
                            Name = "Saint Kitts ve Nevis",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 156L,
                            Name = "Saint Lucia",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 157L,
                            Name = "Saint Vincent ve Grenadinler",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 158L,
                            Name = "Samoa",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 159L,
                            Name = "San Marino",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 160L,
                            Name = "São Tomé ve Príncipe",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 161L,
                            Name = "Senegal",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 162L,
                            Name = "Seyşeller",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 163L,
                            Name = "Sırbistan",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 164L,
                            Name = "Sierra Leone",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 165L,
                            Name = "Singapur",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 166L,
                            Name = "Slovakya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 167L,
                            Name = "Slovenya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 168L,
                            Name = "Solomon Adaları",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 169L,
                            Name = "Somali",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 170L,
                            Name = "Somaliland",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 171L,
                            Name = "Sri Lanka",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 172L,
                            Name = "Sudan",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 173L,
                            Name = "Surinam",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 174L,
                            Name = "Suriye",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 175L,
                            Name = "Suudi Arabistan",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 176L,
                            Name = "Şili",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 177L,
                            Name = "Tacikistan",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 178L,
                            Name = "Tanzanya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 179L,
                            Name = "Tayland",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 180L,
                            Name = "Tayvan",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 181L,
                            Name = "Togo",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 182L,
                            Name = "Tonga",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 183L,
                            Name = "Transdinyester",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 184L,
                            Name = "Trinidad ve Tobago",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 185L,
                            Name = "Tunus",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 186L,
                            Name = "Türkiye",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 187L,
                            Name = "Türkmenistan",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 188L,
                            Name = "Türkmenistan",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 189L,
                            Name = "Uganda",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 190L,
                            Name = "Ukrayna",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 191L,
                            Name = "Umman",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 192L,
                            Name = "Uruguay",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 193L,
                            Name = "Ürdün",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 194L,
                            Name = "Vanuatu",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 195L,
                            Name = "Vatikan",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 196L,
                            Name = "Venezüela",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 197L,
                            Name = "Vietnam",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 198L,
                            Name = "Yemen",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 199L,
                            Name = "Yeni Zelanda",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 200L,
                            Name = "Yeşil Burun Adaları",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 201L,
                            Name = "Yunanistan",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 202L,
                            Name = "Zambiya",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 203L,
                            Name = "Zimbabve",
                            StatusId = 1L
                        });
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Entry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("TitleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TitleId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.EntryAction", b =>
                {
                    b.Property<long>("ActionId")
                        .HasColumnType("bigint");

                    b.Property<long>("EntryId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ActionId", "EntryId", "UserId");

                    b.HasIndex("EntryId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("EntryActions");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Erkek",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Kadın",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Belirsiz",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Belirtmek İstemiyorum",
                            StatusId = 1L
                        });
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BackgroundImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OwnerUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("StatusId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.GroupMember", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.HasIndex("StatusId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("GenderId");

                    b.HasIndex("StatusId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2024, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Aktif",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2024, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pasif",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2024, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Silindi",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Title", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("StatusId");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.TitleAction", b =>
                {
                    b.Property<long>("ActionId")
                        .HasColumnType("bigint");

                    b.Property<long>("TitleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ActionId", "TitleId", "UserId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TitleId");

                    b.HasIndex("UserId");

                    b.ToTable("TitleActions");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Auth.AspIdentityRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Auth.EndPointPermission", b =>
                {
                    b.Property<long>("EndPointId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EndPointId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("StatusId");

                    b.ToTable("EndPointPermissions");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Auth.Guest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Guest");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Auth.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Auth.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Auth.RolePermission", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("StatusId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Auth.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Auth.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Traceability.ActionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "GET"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "POST"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "PUT"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "DELETE"
                        });
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Traceability.EndPoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ActionTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndPointRoute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUse")
                        .HasColumnType("bit");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.ToTable("EndPoints");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Traceability.EndPointActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ActivityEndDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("ActivityStartDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EndPointId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EndPointId");

                    b.ToTable("EndPointActivities");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Traceability.EndPointGuestActivity", b =>
                {
                    b.Property<long>("EndPointActivityId")
                        .HasColumnType("bigint");

                    b.Property<long>("GuestId")
                        .HasColumnType("bigint");

                    b.HasKey("EndPointActivityId");

                    b.HasIndex("GuestId");

                    b.ToTable("EndPointGuestActivities");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Traceability.EndPointUserActivity", b =>
                {
                    b.Property<long>("EndPointActivityId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("EndPointActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("EndPointUserActivities");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.Auth.AspIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.Auth.AspIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleForumApp.Domain.Entities.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Action", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.App.Status", "Status")
                        .WithMany("Actions")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Author", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.App.AuthorType", "AuthorType")
                        .WithMany("Authors")
                        .HasForeignKey("AuthorTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleForumApp.Domain.Entities.App.Group", "Group")
                        .WithMany("Authors")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimpleForumApp.Domain.Entities.App.Status", "Status")
                        .WithMany("Authors")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleForumApp.Domain.Entities.Auth.User", "User")
                        .WithMany("Authors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AuthorType");

                    b.Navigation("Group");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.AuthorType", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.App.Status", "Status")
                        .WithMany("AuthorTypes")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Country", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.App.Status", "Status")
                        .WithMany("Countries")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Entry", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.App.Author", "Author")
                        .WithMany("Entries")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleForumApp.Domain.Entities.App.Status", "Status")
                        .WithMany("Entries")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleForumApp.Domain.Entities.App.Title", "Title")
                        .WithMany("Entries")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Status");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.EntryAction", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.App.Action", "Action")
                        .WithMany("Entries")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleForumApp.Domain.Entities.App.Entry", "Entry")
                        .WithMany("Actions")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleForumApp.Domain.Entities.App.Status", "Status")
                        .WithMany("EntryActions")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleForumApp.Domain.Entities.Auth.User", "User")
                        .WithMany("EntryActions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Entry");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Gender", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.App.Status", "Status")
                        .WithMany("Genders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Group", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.Auth.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleForumApp.Domain.Entities.App.Status", "Status")
                        .WithMany("Groups")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.GroupMember", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.App.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleForumApp.Domain.Entities.App.Status", "Status")
                        .WithMany("GroupMembers")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleForumApp.Domain.Entities.Auth.User", "User")
                        .WithMany("GroupMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Person", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.App.Country", "Country")
                        .WithMany("Persons")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleForumApp.Domain.Entities.App.Gender", "Gender")
                        .WithMany("Persons")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleForumApp.Domain.Entities.App.Status", "Status")
                        .WithMany("Persons")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Gender");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Title", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.App.Author", "Author")
                        .WithMany("Titles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleForumApp.Domain.Entities.App.Status", "Status")
                        .WithMany("Titles")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.TitleAction", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.App.Action", "Action")
                        .WithMany("Titles")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleForumApp.Domain.Entities.App.Status", "Status")
                        .WithMany("TitleActions")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleForumApp.Domain.Entities.App.Title", "Title")
                        .WithMany("Actions")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleForumApp.Domain.Entities.Auth.User", "User")
                        .WithMany("TitleActions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Status");

                    b.Navigation("Title");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Auth.EndPointPermission", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.Traceability.EndPoint", "EndPoint")
                        .WithMany("Permissions")
                        .HasForeignKey("EndPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleForumApp.Domain.Entities.Auth.Permission", "Permission")
                        .WithMany("EndPoints")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleForumApp.Domain.Entities.App.Status", "Status")
                        .WithMany("EndPointPermissions")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EndPoint");

                    b.Navigation("Permission");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Auth.Permission", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.App.Status", "Status")
                        .WithMany("Permissions")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Auth.Role", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.App.Status", "Status")
                        .WithMany("Roles")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Auth.RolePermission", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.Auth.Permission", "Permission")
                        .WithMany("Roles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleForumApp.Domain.Entities.Auth.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleForumApp.Domain.Entities.App.Status", "Status")
                        .WithMany("RolePermissions")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Auth.User", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.App.Person", "Person")
                        .WithOne("User")
                        .HasForeignKey("SimpleForumApp.Domain.Entities.Auth.User", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Auth.UserRole", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.Auth.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleForumApp.Domain.Entities.App.Status", "Status")
                        .WithMany("UserRoles")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleForumApp.Domain.Entities.Auth.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Traceability.EndPoint", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.Traceability.ActionType", "ActionType")
                        .WithMany("EndPoints")
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActionType");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Traceability.EndPointActivity", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.Traceability.EndPoint", "EndPoint")
                        .WithMany("EndPointActivities")
                        .HasForeignKey("EndPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EndPoint");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Traceability.EndPointGuestActivity", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.Traceability.EndPointActivity", "EndPointActivity")
                        .WithOne("EndPointGuestActivity")
                        .HasForeignKey("SimpleForumApp.Domain.Entities.Traceability.EndPointGuestActivity", "EndPointActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleForumApp.Domain.Entities.Auth.Guest", "Guest")
                        .WithMany("EndPointGuestActivities")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EndPointActivity");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Traceability.EndPointUserActivity", b =>
                {
                    b.HasOne("SimpleForumApp.Domain.Entities.Traceability.EndPointActivity", "EndPointActivity")
                        .WithOne("EndPointUserActivity")
                        .HasForeignKey("SimpleForumApp.Domain.Entities.Traceability.EndPointUserActivity", "EndPointActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleForumApp.Domain.Entities.Auth.User", "User")
                        .WithMany("EndPointUserActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EndPointActivity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Action", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("Titles");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Author", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("Titles");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.AuthorType", b =>
                {
                    b.Navigation("Authors");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Country", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Entry", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Gender", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Group", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("GroupMembers");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Person", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Status", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("AuthorTypes");

                    b.Navigation("Authors");

                    b.Navigation("Countries");

                    b.Navigation("EndPointPermissions");

                    b.Navigation("Entries");

                    b.Navigation("EntryActions");

                    b.Navigation("Genders");

                    b.Navigation("GroupMembers");

                    b.Navigation("Groups");

                    b.Navigation("Permissions");

                    b.Navigation("Persons");

                    b.Navigation("RolePermissions");

                    b.Navigation("Roles");

                    b.Navigation("TitleActions");

                    b.Navigation("Titles");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.App.Title", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Entries");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Auth.Guest", b =>
                {
                    b.Navigation("EndPointGuestActivities");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Auth.Permission", b =>
                {
                    b.Navigation("EndPoints");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Auth.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Auth.User", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("EndPointUserActivities");

                    b.Navigation("EntryActions");

                    b.Navigation("GroupMembers");

                    b.Navigation("Groups");

                    b.Navigation("Roles");

                    b.Navigation("TitleActions");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Traceability.ActionType", b =>
                {
                    b.Navigation("EndPoints");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Traceability.EndPoint", b =>
                {
                    b.Navigation("EndPointActivities");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("SimpleForumApp.Domain.Entities.Traceability.EndPointActivity", b =>
                {
                    b.Navigation("EndPointGuestActivity")
                        .IsRequired();

                    b.Navigation("EndPointUserActivity")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
